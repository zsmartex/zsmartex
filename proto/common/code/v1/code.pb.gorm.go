package codev1

import (
	context "context"
	fmt "fmt"
	gateway "github.com/infobloxopen/atlas-app-toolkit/gateway"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	resource "github.com/infobloxopen/atlas-app-toolkit/gorm/resource"
	uuid "github.com/looplab/eventhorizon/uuid"
	null "github.com/mbahjadol/null"
	errors "github.com/zsmartex/protoc-gen-gorm/errors"
	v1 "github.com/zsmartex/zsmartex/proto/common/user/v1"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type CodeORM struct {
	ValidatedAt    null.Time   `json:"validated_at,omitempty"`
	Id             uuid.UUID   `gorm:"type:uuid;primaryKey;autoIncrement" json:"id,omitempty"`
	UserId         uuid.UUID   `gorm:"type:uuid" json:"user_id,omitempty"`
	PhoneEncrypted null.String `json:"phone_encrypted,omitempty"`
	PhoneIndex     null.Int64  `json:"phone_index,omitempty"`
	User           *v1.UserORM `gorm:"type:jsonb;foreignKey:UserId;references:Id" json:"user,omitempty"`
	Category       string      `json:"category,omitempty"`
	EmailEncrypted null.String `json:"email_encrypted,omitempty"`
	ExpiredAt      *time.Time  `json:"expired_at,omitempty"`
	EmailIndex     null.Int64  `json:"email_index,omitempty"`
	AttemptCount   int64       `json:"attempt_count,omitempty"`
	Data           null.Bytes  `json:"data,omitempty"`
	Code           string      `json:"code,omitempty"`
	Type           string      `json:"type,omitempty"`
}

// TableName overrides the default tablename generated by GORM
func (CodeORM) TableName() string {
	return "codes"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Code) ToORM(ctx context.Context) (CodeORM, error) {
	to := CodeORM{}
	var err error
	if prehook, ok := interface{}(m).(CodeWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Decode(&Code{}, m.Id); err != nil {
		return to, err
	} else if v != nil {
		to.Id = v.(uuid.UUID)
	}
	if v, err := resource.Decode(&User{}, m.UserId); err != nil {
		return to, err
	} else if v != nil {
		to.UserId = v.(uuid.UUID)
	}
	to.Code = m.Code
	to.Type = CodeType_name[int32(m.Type)]
	to.Category = CodeCategory_name[int32(m.Category)]
	err = to.EmailEncrypted.Scan(m.EmailEncrypted)
	if err != nil {
		return to, err
	}
	err = to.EmailIndex.Scan(m.EmailIndex)
	if err != nil {
		return to, err
	}
	err = to.PhoneEncrypted.Scan(m.PhoneEncrypted)
	if err != nil {
		return to, err
	}
	err = to.PhoneIndex.Scan(m.PhoneIndex)
	if err != nil {
		return to, err
	}
	to.AttemptCount = m.AttemptCount
	err = to.Data.Scan(m.Data)
	if err != nil {
		return to, err
	}
	t := m.ValidatedAt.AsTime()
	to.ValidatedAt.Scan(t)
	if m.ExpiredAt != nil {
		t := m.ExpiredAt.AsTime()
		to.ExpiredAt = &t
	}
	if m.User != nil {
		tempUser, err := m.User.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if posthook, ok := interface{}(m).(CodeWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *CodeORM) ToPB(ctx context.Context) (Code, error) {
	to := Code{}
	var err error
	if prehook, ok := interface{}(m).(CodeWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if v, err := resource.Encode(&Code{}, m.Id); err != nil {
		return to, err
	} else {
		to.Id = v
	}
	if v, err := resource.Encode(&User{}, m.UserId); err != nil {
		return to, err
	} else {
		to.UserId = v
	}
	to.Code = m.Code
	to.Type = CodeType(CodeType_value[m.Type])
	to.Category = CodeCategory(CodeCategory_value[m.Category])
	to.EmailEncrypted = m.EmailEncrypted.String
	to.EmailIndex = m.EmailIndex.Int64
	to.PhoneEncrypted = m.PhoneEncrypted.String
	to.PhoneIndex = m.PhoneIndex.Int64
	to.AttemptCount = m.AttemptCount
	to.Data = m.Data.Bytes
	if m.ValidatedAt.IsValid() {
		to.ValidatedAt = timestamppb.New(m.ValidatedAt.Time)
	}
	if m.ExpiredAt != nil {
		to.ExpiredAt = timestamppb.New(*m.ExpiredAt)
	}
	if m.User != nil {
		tempUser, err := m.User.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.User = &tempUser
	}
	if posthook, ok := interface{}(m).(CodeWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Code the arg will be the target, the caller the one being converted from

// CodeBeforeToORM called before default ToORM code
type CodeWithBeforeToORM interface {
	BeforeToORM(context.Context, *CodeORM) error
}

// CodeAfterToORM called after default ToORM code
type CodeWithAfterToORM interface {
	AfterToORM(context.Context, *CodeORM) error
}

// CodeBeforeToPB called before default ToPB code
type CodeWithBeforeToPB interface {
	BeforeToPB(context.Context, *Code) error
}

// CodeAfterToPB called after default ToPB code
type CodeWithAfterToPB interface {
	AfterToPB(context.Context, *Code) error
}

// DefaultCreateCode executes a basic gorm create call
func DefaultCreateCode(ctx context.Context, in *Code, db *gorm.DB) (*Code, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type CodeORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadCode(ctx context.Context, in *Code, db *gorm.DB) (*Code, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &CodeORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := CodeORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(CodeORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type CodeORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteCode(ctx context.Context, in *Code, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&CodeORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type CodeORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteCodeSet(ctx context.Context, in []*Code, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&CodeORM{})).(CodeORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&CodeORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&CodeORM{})).(CodeORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type CodeORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Code, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Code, *gorm.DB) error
}

// DefaultStrictUpdateCode clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateCode(ctx context.Context, in *Code, db *gorm.DB) (*Code, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateCode")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	var count int64
	lockedRow := &CodeORM{}
	count = db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow).RowsAffected
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	if count == 0 {
		err = gateway.SetCreated(ctx, "")
	}
	return &pbResponse, err
}

type CodeORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchCode executes a basic gorm update call with patch behavior
func DefaultPatchCode(ctx context.Context, in *Code, updateMask *field_mask.FieldMask, db *gorm.DB) (*Code, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Code
	var err error
	if hook, ok := interface{}(&pbObj).(CodeWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadCode(ctx, &Code{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(CodeWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskCode(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(CodeWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateCode(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(CodeWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type CodeWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Code, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CodeWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Code, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CodeWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Code, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type CodeWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Code, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetCode executes a bulk gorm update call with patch behavior
func DefaultPatchSetCode(ctx context.Context, objects []*Code, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Code, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Code, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchCode(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskCode patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskCode(ctx context.Context, patchee *Code, patcher *Code, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Code, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedValidatedAt bool
	var updatedExpiredAt bool
	var updatedUser bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"UserId" {
			patchee.UserId = patcher.UserId
			continue
		}
		if f == prefix+"Code" {
			patchee.Code = patcher.Code
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"Category" {
			patchee.Category = patcher.Category
			continue
		}
		if f == prefix+"EmailEncrypted" {
			patchee.EmailEncrypted = patcher.EmailEncrypted
			continue
		}
		if f == prefix+"EmailIndex" {
			patchee.EmailIndex = patcher.EmailIndex
			continue
		}
		if f == prefix+"PhoneEncrypted" {
			patchee.PhoneEncrypted = patcher.PhoneEncrypted
			continue
		}
		if f == prefix+"PhoneIndex" {
			patchee.PhoneIndex = patcher.PhoneIndex
			continue
		}
		if f == prefix+"AttemptCount" {
			patchee.AttemptCount = patcher.AttemptCount
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
		if !updatedValidatedAt && strings.HasPrefix(f, prefix+"ValidatedAt.") {
			if patcher.ValidatedAt == nil {
				patchee.ValidatedAt = nil
				continue
			}
			if patchee.ValidatedAt == nil {
				patchee.ValidatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ValidatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ValidatedAt, patchee.ValidatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ValidatedAt" {
			updatedValidatedAt = true
			patchee.ValidatedAt = patcher.ValidatedAt
			continue
		}
		if !updatedExpiredAt && strings.HasPrefix(f, prefix+"ExpiredAt.") {
			if patcher.ExpiredAt == nil {
				patchee.ExpiredAt = nil
				continue
			}
			if patchee.ExpiredAt == nil {
				patchee.ExpiredAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"ExpiredAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.ExpiredAt, patchee.ExpiredAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"ExpiredAt" {
			updatedExpiredAt = true
			patchee.ExpiredAt = patcher.ExpiredAt
			continue
		}
		if !updatedUser && strings.HasPrefix(f, prefix+"User.") {
			updatedUser = true
			if patcher.User == nil {
				patchee.User = nil
				continue
			}
			if patchee.User == nil {
				patchee.User = &v1.User{}
			}
			if o, err := v1.DefaultApplyFieldMaskUser(ctx, patchee.User, patcher.User, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"User.", db); err != nil {
				return nil, err
			} else {
				patchee.User = o
			}
			continue
		}
		if f == prefix+"User" {
			updatedUser = true
			patchee.User = patcher.User
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListCode executes a gorm list call
func DefaultListCode(ctx context.Context, db *gorm.DB) ([]*Code, error) {
	in := Code{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &CodeORM{}, &Code{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []CodeORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(CodeORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Code{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type CodeORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type CodeORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]CodeORM) error
}
