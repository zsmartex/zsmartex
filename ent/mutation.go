// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zsmartex/zsmartex/ent/code"
	"github.com/zsmartex/zsmartex/ent/predicate"
	"github.com/zsmartex/zsmartex/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCode = "Code"
	TypeUser = "User"
)

// CodeMutation represents an operation that mutates the Code nodes in the graph.
type CodeMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	user_id         *string
	code            *string
	_type           *code.Type
	category        *code.Category
	email_index     *int64
	addemail_index  *int64
	email_encrypted *string
	phone_index     *int64
	addphone_index  *int64
	phone_encrypted *string
	data            *json.RawMessage
	appenddata      json.RawMessage
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Code, error)
	predicates      []predicate.Code
}

var _ ent.Mutation = (*CodeMutation)(nil)

// codeOption allows management of the mutation configuration using functional options.
type codeOption func(*CodeMutation)

// newCodeMutation creates new mutation for the Code entity.
func newCodeMutation(c config, op Op, opts ...codeOption) *CodeMutation {
	m := &CodeMutation{
		config:        c,
		op:            op,
		typ:           TypeCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCodeID sets the ID field of the mutation.
func withCodeID(id uuid.UUID) codeOption {
	return func(m *CodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Code
		)
		m.oldValue = func(ctx context.Context) (*Code, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Code.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCode sets the old Code of the mutation.
func withCode(node *Code) codeOption {
	return func(m *CodeMutation) {
		m.oldValue = func(context.Context) (*Code, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Code entities.
func (m *CodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Code.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *CodeMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *CodeMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *CodeMutation) ResetUserID() {
	m.user_id = nil
}

// SetCode sets the "code" field.
func (m *CodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *CodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *CodeMutation) ResetCode() {
	m.code = nil
}

// SetType sets the "type" field.
func (m *CodeMutation) SetType(c code.Type) {
	m._type = &c
}

// GetType returns the value of the "type" field in the mutation.
func (m *CodeMutation) GetType() (r code.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldType(ctx context.Context) (v code.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *CodeMutation) ResetType() {
	m._type = nil
}

// SetCategory sets the "category" field.
func (m *CodeMutation) SetCategory(c code.Category) {
	m.category = &c
}

// Category returns the value of the "category" field in the mutation.
func (m *CodeMutation) Category() (r code.Category, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldCategory(ctx context.Context) (v code.Category, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// ResetCategory resets all changes to the "category" field.
func (m *CodeMutation) ResetCategory() {
	m.category = nil
}

// SetEmailIndex sets the "email_index" field.
func (m *CodeMutation) SetEmailIndex(i int64) {
	m.email_index = &i
	m.addemail_index = nil
}

// EmailIndex returns the value of the "email_index" field in the mutation.
func (m *CodeMutation) EmailIndex() (r int64, exists bool) {
	v := m.email_index
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailIndex returns the old "email_index" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldEmailIndex(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailIndex: %w", err)
	}
	return oldValue.EmailIndex, nil
}

// AddEmailIndex adds i to the "email_index" field.
func (m *CodeMutation) AddEmailIndex(i int64) {
	if m.addemail_index != nil {
		*m.addemail_index += i
	} else {
		m.addemail_index = &i
	}
}

// AddedEmailIndex returns the value that was added to the "email_index" field in this mutation.
func (m *CodeMutation) AddedEmailIndex() (r int64, exists bool) {
	v := m.addemail_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearEmailIndex clears the value of the "email_index" field.
func (m *CodeMutation) ClearEmailIndex() {
	m.email_index = nil
	m.addemail_index = nil
	m.clearedFields[code.FieldEmailIndex] = struct{}{}
}

// EmailIndexCleared returns if the "email_index" field was cleared in this mutation.
func (m *CodeMutation) EmailIndexCleared() bool {
	_, ok := m.clearedFields[code.FieldEmailIndex]
	return ok
}

// ResetEmailIndex resets all changes to the "email_index" field.
func (m *CodeMutation) ResetEmailIndex() {
	m.email_index = nil
	m.addemail_index = nil
	delete(m.clearedFields, code.FieldEmailIndex)
}

// SetEmailEncrypted sets the "email_encrypted" field.
func (m *CodeMutation) SetEmailEncrypted(s string) {
	m.email_encrypted = &s
}

// EmailEncrypted returns the value of the "email_encrypted" field in the mutation.
func (m *CodeMutation) EmailEncrypted() (r string, exists bool) {
	v := m.email_encrypted
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailEncrypted returns the old "email_encrypted" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldEmailEncrypted(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailEncrypted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailEncrypted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailEncrypted: %w", err)
	}
	return oldValue.EmailEncrypted, nil
}

// ClearEmailEncrypted clears the value of the "email_encrypted" field.
func (m *CodeMutation) ClearEmailEncrypted() {
	m.email_encrypted = nil
	m.clearedFields[code.FieldEmailEncrypted] = struct{}{}
}

// EmailEncryptedCleared returns if the "email_encrypted" field was cleared in this mutation.
func (m *CodeMutation) EmailEncryptedCleared() bool {
	_, ok := m.clearedFields[code.FieldEmailEncrypted]
	return ok
}

// ResetEmailEncrypted resets all changes to the "email_encrypted" field.
func (m *CodeMutation) ResetEmailEncrypted() {
	m.email_encrypted = nil
	delete(m.clearedFields, code.FieldEmailEncrypted)
}

// SetPhoneIndex sets the "phone_index" field.
func (m *CodeMutation) SetPhoneIndex(i int64) {
	m.phone_index = &i
	m.addphone_index = nil
}

// PhoneIndex returns the value of the "phone_index" field in the mutation.
func (m *CodeMutation) PhoneIndex() (r int64, exists bool) {
	v := m.phone_index
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneIndex returns the old "phone_index" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldPhoneIndex(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneIndex: %w", err)
	}
	return oldValue.PhoneIndex, nil
}

// AddPhoneIndex adds i to the "phone_index" field.
func (m *CodeMutation) AddPhoneIndex(i int64) {
	if m.addphone_index != nil {
		*m.addphone_index += i
	} else {
		m.addphone_index = &i
	}
}

// AddedPhoneIndex returns the value that was added to the "phone_index" field in this mutation.
func (m *CodeMutation) AddedPhoneIndex() (r int64, exists bool) {
	v := m.addphone_index
	if v == nil {
		return
	}
	return *v, true
}

// ClearPhoneIndex clears the value of the "phone_index" field.
func (m *CodeMutation) ClearPhoneIndex() {
	m.phone_index = nil
	m.addphone_index = nil
	m.clearedFields[code.FieldPhoneIndex] = struct{}{}
}

// PhoneIndexCleared returns if the "phone_index" field was cleared in this mutation.
func (m *CodeMutation) PhoneIndexCleared() bool {
	_, ok := m.clearedFields[code.FieldPhoneIndex]
	return ok
}

// ResetPhoneIndex resets all changes to the "phone_index" field.
func (m *CodeMutation) ResetPhoneIndex() {
	m.phone_index = nil
	m.addphone_index = nil
	delete(m.clearedFields, code.FieldPhoneIndex)
}

// SetPhoneEncrypted sets the "phone_encrypted" field.
func (m *CodeMutation) SetPhoneEncrypted(s string) {
	m.phone_encrypted = &s
}

// PhoneEncrypted returns the value of the "phone_encrypted" field in the mutation.
func (m *CodeMutation) PhoneEncrypted() (r string, exists bool) {
	v := m.phone_encrypted
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneEncrypted returns the old "phone_encrypted" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldPhoneEncrypted(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhoneEncrypted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhoneEncrypted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneEncrypted: %w", err)
	}
	return oldValue.PhoneEncrypted, nil
}

// ClearPhoneEncrypted clears the value of the "phone_encrypted" field.
func (m *CodeMutation) ClearPhoneEncrypted() {
	m.phone_encrypted = nil
	m.clearedFields[code.FieldPhoneEncrypted] = struct{}{}
}

// PhoneEncryptedCleared returns if the "phone_encrypted" field was cleared in this mutation.
func (m *CodeMutation) PhoneEncryptedCleared() bool {
	_, ok := m.clearedFields[code.FieldPhoneEncrypted]
	return ok
}

// ResetPhoneEncrypted resets all changes to the "phone_encrypted" field.
func (m *CodeMutation) ResetPhoneEncrypted() {
	m.phone_encrypted = nil
	delete(m.clearedFields, code.FieldPhoneEncrypted)
}

// SetData sets the "data" field.
func (m *CodeMutation) SetData(jm json.RawMessage) {
	m.data = &jm
	m.appenddata = nil
}

// Data returns the value of the "data" field in the mutation.
func (m *CodeMutation) Data() (r json.RawMessage, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldData(ctx context.Context) (v json.RawMessage, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// AppendData adds jm to the "data" field.
func (m *CodeMutation) AppendData(jm json.RawMessage) {
	m.appenddata = append(m.appenddata, jm...)
}

// AppendedData returns the list of values that were appended to the "data" field in this mutation.
func (m *CodeMutation) AppendedData() (json.RawMessage, bool) {
	if len(m.appenddata) == 0 {
		return nil, false
	}
	return m.appenddata, true
}

// ClearData clears the value of the "data" field.
func (m *CodeMutation) ClearData() {
	m.data = nil
	m.appenddata = nil
	m.clearedFields[code.FieldData] = struct{}{}
}

// DataCleared returns if the "data" field was cleared in this mutation.
func (m *CodeMutation) DataCleared() bool {
	_, ok := m.clearedFields[code.FieldData]
	return ok
}

// ResetData resets all changes to the "data" field.
func (m *CodeMutation) ResetData() {
	m.data = nil
	m.appenddata = nil
	delete(m.clearedFields, code.FieldData)
}

// SetCreatedAt sets the "created_at" field.
func (m *CodeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CodeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CodeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CodeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CodeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Code entity.
// If the Code object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CodeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CodeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CodeMutation builder.
func (m *CodeMutation) Where(ps ...predicate.Code) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Code, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Code).
func (m *CodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CodeMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.user_id != nil {
		fields = append(fields, code.FieldUserID)
	}
	if m.code != nil {
		fields = append(fields, code.FieldCode)
	}
	if m._type != nil {
		fields = append(fields, code.FieldType)
	}
	if m.category != nil {
		fields = append(fields, code.FieldCategory)
	}
	if m.email_index != nil {
		fields = append(fields, code.FieldEmailIndex)
	}
	if m.email_encrypted != nil {
		fields = append(fields, code.FieldEmailEncrypted)
	}
	if m.phone_index != nil {
		fields = append(fields, code.FieldPhoneIndex)
	}
	if m.phone_encrypted != nil {
		fields = append(fields, code.FieldPhoneEncrypted)
	}
	if m.data != nil {
		fields = append(fields, code.FieldData)
	}
	if m.created_at != nil {
		fields = append(fields, code.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, code.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case code.FieldUserID:
		return m.UserID()
	case code.FieldCode:
		return m.Code()
	case code.FieldType:
		return m.GetType()
	case code.FieldCategory:
		return m.Category()
	case code.FieldEmailIndex:
		return m.EmailIndex()
	case code.FieldEmailEncrypted:
		return m.EmailEncrypted()
	case code.FieldPhoneIndex:
		return m.PhoneIndex()
	case code.FieldPhoneEncrypted:
		return m.PhoneEncrypted()
	case code.FieldData:
		return m.Data()
	case code.FieldCreatedAt:
		return m.CreatedAt()
	case code.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case code.FieldUserID:
		return m.OldUserID(ctx)
	case code.FieldCode:
		return m.OldCode(ctx)
	case code.FieldType:
		return m.OldType(ctx)
	case code.FieldCategory:
		return m.OldCategory(ctx)
	case code.FieldEmailIndex:
		return m.OldEmailIndex(ctx)
	case code.FieldEmailEncrypted:
		return m.OldEmailEncrypted(ctx)
	case code.FieldPhoneIndex:
		return m.OldPhoneIndex(ctx)
	case code.FieldPhoneEncrypted:
		return m.OldPhoneEncrypted(ctx)
	case code.FieldData:
		return m.OldData(ctx)
	case code.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case code.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Code field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case code.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case code.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case code.FieldType:
		v, ok := value.(code.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case code.FieldCategory:
		v, ok := value.(code.Category)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case code.FieldEmailIndex:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailIndex(v)
		return nil
	case code.FieldEmailEncrypted:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailEncrypted(v)
		return nil
	case code.FieldPhoneIndex:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneIndex(v)
		return nil
	case code.FieldPhoneEncrypted:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneEncrypted(v)
		return nil
	case code.FieldData:
		v, ok := value.(json.RawMessage)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case code.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case code.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Code field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CodeMutation) AddedFields() []string {
	var fields []string
	if m.addemail_index != nil {
		fields = append(fields, code.FieldEmailIndex)
	}
	if m.addphone_index != nil {
		fields = append(fields, code.FieldPhoneIndex)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case code.FieldEmailIndex:
		return m.AddedEmailIndex()
	case code.FieldPhoneIndex:
		return m.AddedPhoneIndex()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case code.FieldEmailIndex:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEmailIndex(v)
		return nil
	case code.FieldPhoneIndex:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPhoneIndex(v)
		return nil
	}
	return fmt.Errorf("unknown Code numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(code.FieldEmailIndex) {
		fields = append(fields, code.FieldEmailIndex)
	}
	if m.FieldCleared(code.FieldEmailEncrypted) {
		fields = append(fields, code.FieldEmailEncrypted)
	}
	if m.FieldCleared(code.FieldPhoneIndex) {
		fields = append(fields, code.FieldPhoneIndex)
	}
	if m.FieldCleared(code.FieldPhoneEncrypted) {
		fields = append(fields, code.FieldPhoneEncrypted)
	}
	if m.FieldCleared(code.FieldData) {
		fields = append(fields, code.FieldData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CodeMutation) ClearField(name string) error {
	switch name {
	case code.FieldEmailIndex:
		m.ClearEmailIndex()
		return nil
	case code.FieldEmailEncrypted:
		m.ClearEmailEncrypted()
		return nil
	case code.FieldPhoneIndex:
		m.ClearPhoneIndex()
		return nil
	case code.FieldPhoneEncrypted:
		m.ClearPhoneEncrypted()
		return nil
	case code.FieldData:
		m.ClearData()
		return nil
	}
	return fmt.Errorf("unknown Code nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CodeMutation) ResetField(name string) error {
	switch name {
	case code.FieldUserID:
		m.ResetUserID()
		return nil
	case code.FieldCode:
		m.ResetCode()
		return nil
	case code.FieldType:
		m.ResetType()
		return nil
	case code.FieldCategory:
		m.ResetCategory()
		return nil
	case code.FieldEmailIndex:
		m.ResetEmailIndex()
		return nil
	case code.FieldEmailEncrypted:
		m.ResetEmailEncrypted()
		return nil
	case code.FieldPhoneIndex:
		m.ResetPhoneIndex()
		return nil
	case code.FieldPhoneEncrypted:
		m.ResetPhoneEncrypted()
		return nil
	case code.FieldData:
		m.ResetData()
		return nil
	case code.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case code.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Code field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Code unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Code edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	uid           *string
	email         *string
	password      *string
	role          *user.Role
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *UserMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *UserMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *UserMutation) ResetUID() {
	m.uid = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.uid != nil {
		fields = append(fields, user.FieldUID)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUID:
		return m.UID()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUID:
		return m.OldUID(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUID:
		m.ResetUID()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
