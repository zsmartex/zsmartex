// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zsmartex/zsmartex/ent/code"
)

// CodeCreate is the builder for creating a Code entity.
type CodeCreate struct {
	config
	mutation *CodeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (cc *CodeCreate) SetUserID(s string) *CodeCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetCode sets the "code" field.
func (cc *CodeCreate) SetCode(s string) *CodeCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetType sets the "type" field.
func (cc *CodeCreate) SetType(c code.Type) *CodeCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CodeCreate) SetNillableType(c *code.Type) *CodeCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetCategory sets the "category" field.
func (cc *CodeCreate) SetCategory(c code.Category) *CodeCreate {
	cc.mutation.SetCategory(c)
	return cc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cc *CodeCreate) SetNillableCategory(c *code.Category) *CodeCreate {
	if c != nil {
		cc.SetCategory(*c)
	}
	return cc
}

// SetEmailIndex sets the "email_index" field.
func (cc *CodeCreate) SetEmailIndex(i int64) *CodeCreate {
	cc.mutation.SetEmailIndex(i)
	return cc
}

// SetNillableEmailIndex sets the "email_index" field if the given value is not nil.
func (cc *CodeCreate) SetNillableEmailIndex(i *int64) *CodeCreate {
	if i != nil {
		cc.SetEmailIndex(*i)
	}
	return cc
}

// SetEmailEncrypted sets the "email_encrypted" field.
func (cc *CodeCreate) SetEmailEncrypted(s string) *CodeCreate {
	cc.mutation.SetEmailEncrypted(s)
	return cc
}

// SetNillableEmailEncrypted sets the "email_encrypted" field if the given value is not nil.
func (cc *CodeCreate) SetNillableEmailEncrypted(s *string) *CodeCreate {
	if s != nil {
		cc.SetEmailEncrypted(*s)
	}
	return cc
}

// SetPhoneIndex sets the "phone_index" field.
func (cc *CodeCreate) SetPhoneIndex(i int64) *CodeCreate {
	cc.mutation.SetPhoneIndex(i)
	return cc
}

// SetNillablePhoneIndex sets the "phone_index" field if the given value is not nil.
func (cc *CodeCreate) SetNillablePhoneIndex(i *int64) *CodeCreate {
	if i != nil {
		cc.SetPhoneIndex(*i)
	}
	return cc
}

// SetPhoneEncrypted sets the "phone_encrypted" field.
func (cc *CodeCreate) SetPhoneEncrypted(s string) *CodeCreate {
	cc.mutation.SetPhoneEncrypted(s)
	return cc
}

// SetNillablePhoneEncrypted sets the "phone_encrypted" field if the given value is not nil.
func (cc *CodeCreate) SetNillablePhoneEncrypted(s *string) *CodeCreate {
	if s != nil {
		cc.SetPhoneEncrypted(*s)
	}
	return cc
}

// SetData sets the "data" field.
func (cc *CodeCreate) SetData(jm json.RawMessage) *CodeCreate {
	cc.mutation.SetData(jm)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CodeCreate) SetCreatedAt(t time.Time) *CodeCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CodeCreate) SetUpdatedAt(t time.Time) *CodeCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CodeCreate) SetNillableUpdatedAt(t *time.Time) *CodeCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CodeCreate) SetID(u uuid.UUID) *CodeCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the CodeMutation object of the builder.
func (cc *CodeCreate) Mutation() *CodeMutation {
	return cc.mutation
}

// Save creates the Code in the database.
func (cc *CodeCreate) Save(ctx context.Context) (*Code, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CodeCreate) SaveX(ctx context.Context) *Code {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CodeCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CodeCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CodeCreate) defaults() {
	if _, ok := cc.mutation.GetType(); !ok {
		v := code.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.Category(); !ok {
		v := code.DefaultCategory
		cc.mutation.SetCategory(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := code.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CodeCreate) check() error {
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Code.user_id"`)}
	}
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Code.code"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Code.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := code.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Code.type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Code.category"`)}
	}
	if v, ok := cc.mutation.Category(); ok {
		if err := code.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Code.category": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Code.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Code.updated_at"`)}
	}
	return nil
}

func (cc *CodeCreate) sqlSave(ctx context.Context) (*Code, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CodeCreate) createSpec() (*Code, *sqlgraph.CreateSpec) {
	var (
		_node = &Code{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(code.Table, sqlgraph.NewFieldSpec(code.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(code.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.Code(); ok {
		_spec.SetField(code.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(code.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(code.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.EmailIndex(); ok {
		_spec.SetField(code.FieldEmailIndex, field.TypeInt64, value)
		_node.EmailIndex = value
	}
	if value, ok := cc.mutation.EmailEncrypted(); ok {
		_spec.SetField(code.FieldEmailEncrypted, field.TypeString, value)
		_node.EmailEncrypted = value
	}
	if value, ok := cc.mutation.PhoneIndex(); ok {
		_spec.SetField(code.FieldPhoneIndex, field.TypeInt64, value)
		_node.PhoneIndex = value
	}
	if value, ok := cc.mutation.PhoneEncrypted(); ok {
		_spec.SetField(code.FieldPhoneEncrypted, field.TypeString, value)
		_node.PhoneEncrypted = value
	}
	if value, ok := cc.mutation.Data(); ok {
		_spec.SetField(code.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(code.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(code.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// CodeCreateBulk is the builder for creating many Code entities in bulk.
type CodeCreateBulk struct {
	config
	err      error
	builders []*CodeCreate
}

// Save creates the Code entities in the database.
func (ccb *CodeCreateBulk) Save(ctx context.Context) ([]*Code, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Code, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CodeCreateBulk) SaveX(ctx context.Context) []*Code {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CodeCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
