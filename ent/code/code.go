// Code generated by ent, DO NOT EDIT.

package code

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the code type in the database.
	Label = "code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldEmailIndex holds the string denoting the email_index field in the database.
	FieldEmailIndex = "email_index"
	// FieldEmailEncrypted holds the string denoting the email_encrypted field in the database.
	FieldEmailEncrypted = "email_encrypted"
	// FieldPhoneIndex holds the string denoting the phone_index field in the database.
	FieldPhoneIndex = "phone_index"
	// FieldPhoneEncrypted holds the string denoting the phone_encrypted field in the database.
	FieldPhoneEncrypted = "phone_encrypted"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the code in the database.
	Table = "codes"
)

// Columns holds all SQL columns for code fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldCode,
	FieldType,
	FieldCategory,
	FieldEmailIndex,
	FieldEmailEncrypted,
	FieldPhoneIndex,
	FieldPhoneEncrypted,
	FieldData,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// TypeUnknown is the default value of the Type enum.
const DefaultType = TypeUnknown

// Type values.
const (
	TypeUnknown Type = "unknown"
	TypeEmail   Type = "email"
	TypePhone   Type = "phone"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUnknown, TypeEmail, TypePhone:
		return nil
	default:
		return fmt.Errorf("code: invalid enum value for type field: %q", _type)
	}
}

// Category defines the type for the "category" enum field.
type Category string

// CategoryUnknown is the default value of the Category enum.
const DefaultCategory = CategoryUnknown

// Category values.
const (
	CategoryUnknown       Category = "unknown"
	CategoryRegister      Category = "register"
	CategoryResetPassword Category = "reset_password"
	CategoryLogin         Category = "login"
)

func (c Category) String() string {
	return string(c)
}

// CategoryValidator is a validator for the "category" field enum values. It is called by the builders before save.
func CategoryValidator(c Category) error {
	switch c {
	case CategoryUnknown, CategoryRegister, CategoryResetPassword, CategoryLogin:
		return nil
	default:
		return fmt.Errorf("code: invalid enum value for category field: %q", c)
	}
}

// OrderOption defines the ordering options for the Code queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByEmailIndex orders the results by the email_index field.
func ByEmailIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailIndex, opts...).ToFunc()
}

// ByEmailEncrypted orders the results by the email_encrypted field.
func ByEmailEncrypted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailEncrypted, opts...).ToFunc()
}

// ByPhoneIndex orders the results by the phone_index field.
func ByPhoneIndex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneIndex, opts...).ToFunc()
}

// ByPhoneEncrypted orders the results by the phone_encrypted field.
func ByPhoneEncrypted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneEncrypted, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
