// Code generated by ent, DO NOT EDIT.

package code

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zsmartex/zsmartex/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldUserID, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldCode, v))
}

// EmailIndex applies equality check predicate on the "email_index" field. It's identical to EmailIndexEQ.
func EmailIndex(v int64) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldEmailIndex, v))
}

// EmailEncrypted applies equality check predicate on the "email_encrypted" field. It's identical to EmailEncryptedEQ.
func EmailEncrypted(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldEmailEncrypted, v))
}

// PhoneIndex applies equality check predicate on the "phone_index" field. It's identical to PhoneIndexEQ.
func PhoneIndex(v int64) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldPhoneIndex, v))
}

// PhoneEncrypted applies equality check predicate on the "phone_encrypted" field. It's identical to PhoneEncryptedEQ.
func PhoneEncrypted(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldPhoneEncrypted, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Code {
	return predicate.Code(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Code {
	return predicate.Code(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Code {
	return predicate.Code(sql.FieldContainsFold(FieldUserID, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Code {
	return predicate.Code(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Code {
	return predicate.Code(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Code {
	return predicate.Code(sql.FieldContainsFold(FieldCode, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldType, vs...))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldCategory, vs...))
}

// EmailIndexEQ applies the EQ predicate on the "email_index" field.
func EmailIndexEQ(v int64) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldEmailIndex, v))
}

// EmailIndexNEQ applies the NEQ predicate on the "email_index" field.
func EmailIndexNEQ(v int64) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldEmailIndex, v))
}

// EmailIndexIn applies the In predicate on the "email_index" field.
func EmailIndexIn(vs ...int64) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldEmailIndex, vs...))
}

// EmailIndexNotIn applies the NotIn predicate on the "email_index" field.
func EmailIndexNotIn(vs ...int64) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldEmailIndex, vs...))
}

// EmailIndexGT applies the GT predicate on the "email_index" field.
func EmailIndexGT(v int64) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldEmailIndex, v))
}

// EmailIndexGTE applies the GTE predicate on the "email_index" field.
func EmailIndexGTE(v int64) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldEmailIndex, v))
}

// EmailIndexLT applies the LT predicate on the "email_index" field.
func EmailIndexLT(v int64) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldEmailIndex, v))
}

// EmailIndexLTE applies the LTE predicate on the "email_index" field.
func EmailIndexLTE(v int64) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldEmailIndex, v))
}

// EmailIndexIsNil applies the IsNil predicate on the "email_index" field.
func EmailIndexIsNil() predicate.Code {
	return predicate.Code(sql.FieldIsNull(FieldEmailIndex))
}

// EmailIndexNotNil applies the NotNil predicate on the "email_index" field.
func EmailIndexNotNil() predicate.Code {
	return predicate.Code(sql.FieldNotNull(FieldEmailIndex))
}

// EmailEncryptedEQ applies the EQ predicate on the "email_encrypted" field.
func EmailEncryptedEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldEmailEncrypted, v))
}

// EmailEncryptedNEQ applies the NEQ predicate on the "email_encrypted" field.
func EmailEncryptedNEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldEmailEncrypted, v))
}

// EmailEncryptedIn applies the In predicate on the "email_encrypted" field.
func EmailEncryptedIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldEmailEncrypted, vs...))
}

// EmailEncryptedNotIn applies the NotIn predicate on the "email_encrypted" field.
func EmailEncryptedNotIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldEmailEncrypted, vs...))
}

// EmailEncryptedGT applies the GT predicate on the "email_encrypted" field.
func EmailEncryptedGT(v string) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldEmailEncrypted, v))
}

// EmailEncryptedGTE applies the GTE predicate on the "email_encrypted" field.
func EmailEncryptedGTE(v string) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldEmailEncrypted, v))
}

// EmailEncryptedLT applies the LT predicate on the "email_encrypted" field.
func EmailEncryptedLT(v string) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldEmailEncrypted, v))
}

// EmailEncryptedLTE applies the LTE predicate on the "email_encrypted" field.
func EmailEncryptedLTE(v string) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldEmailEncrypted, v))
}

// EmailEncryptedContains applies the Contains predicate on the "email_encrypted" field.
func EmailEncryptedContains(v string) predicate.Code {
	return predicate.Code(sql.FieldContains(FieldEmailEncrypted, v))
}

// EmailEncryptedHasPrefix applies the HasPrefix predicate on the "email_encrypted" field.
func EmailEncryptedHasPrefix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasPrefix(FieldEmailEncrypted, v))
}

// EmailEncryptedHasSuffix applies the HasSuffix predicate on the "email_encrypted" field.
func EmailEncryptedHasSuffix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasSuffix(FieldEmailEncrypted, v))
}

// EmailEncryptedIsNil applies the IsNil predicate on the "email_encrypted" field.
func EmailEncryptedIsNil() predicate.Code {
	return predicate.Code(sql.FieldIsNull(FieldEmailEncrypted))
}

// EmailEncryptedNotNil applies the NotNil predicate on the "email_encrypted" field.
func EmailEncryptedNotNil() predicate.Code {
	return predicate.Code(sql.FieldNotNull(FieldEmailEncrypted))
}

// EmailEncryptedEqualFold applies the EqualFold predicate on the "email_encrypted" field.
func EmailEncryptedEqualFold(v string) predicate.Code {
	return predicate.Code(sql.FieldEqualFold(FieldEmailEncrypted, v))
}

// EmailEncryptedContainsFold applies the ContainsFold predicate on the "email_encrypted" field.
func EmailEncryptedContainsFold(v string) predicate.Code {
	return predicate.Code(sql.FieldContainsFold(FieldEmailEncrypted, v))
}

// PhoneIndexEQ applies the EQ predicate on the "phone_index" field.
func PhoneIndexEQ(v int64) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldPhoneIndex, v))
}

// PhoneIndexNEQ applies the NEQ predicate on the "phone_index" field.
func PhoneIndexNEQ(v int64) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldPhoneIndex, v))
}

// PhoneIndexIn applies the In predicate on the "phone_index" field.
func PhoneIndexIn(vs ...int64) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldPhoneIndex, vs...))
}

// PhoneIndexNotIn applies the NotIn predicate on the "phone_index" field.
func PhoneIndexNotIn(vs ...int64) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldPhoneIndex, vs...))
}

// PhoneIndexGT applies the GT predicate on the "phone_index" field.
func PhoneIndexGT(v int64) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldPhoneIndex, v))
}

// PhoneIndexGTE applies the GTE predicate on the "phone_index" field.
func PhoneIndexGTE(v int64) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldPhoneIndex, v))
}

// PhoneIndexLT applies the LT predicate on the "phone_index" field.
func PhoneIndexLT(v int64) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldPhoneIndex, v))
}

// PhoneIndexLTE applies the LTE predicate on the "phone_index" field.
func PhoneIndexLTE(v int64) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldPhoneIndex, v))
}

// PhoneIndexIsNil applies the IsNil predicate on the "phone_index" field.
func PhoneIndexIsNil() predicate.Code {
	return predicate.Code(sql.FieldIsNull(FieldPhoneIndex))
}

// PhoneIndexNotNil applies the NotNil predicate on the "phone_index" field.
func PhoneIndexNotNil() predicate.Code {
	return predicate.Code(sql.FieldNotNull(FieldPhoneIndex))
}

// PhoneEncryptedEQ applies the EQ predicate on the "phone_encrypted" field.
func PhoneEncryptedEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldPhoneEncrypted, v))
}

// PhoneEncryptedNEQ applies the NEQ predicate on the "phone_encrypted" field.
func PhoneEncryptedNEQ(v string) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldPhoneEncrypted, v))
}

// PhoneEncryptedIn applies the In predicate on the "phone_encrypted" field.
func PhoneEncryptedIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldPhoneEncrypted, vs...))
}

// PhoneEncryptedNotIn applies the NotIn predicate on the "phone_encrypted" field.
func PhoneEncryptedNotIn(vs ...string) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldPhoneEncrypted, vs...))
}

// PhoneEncryptedGT applies the GT predicate on the "phone_encrypted" field.
func PhoneEncryptedGT(v string) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldPhoneEncrypted, v))
}

// PhoneEncryptedGTE applies the GTE predicate on the "phone_encrypted" field.
func PhoneEncryptedGTE(v string) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldPhoneEncrypted, v))
}

// PhoneEncryptedLT applies the LT predicate on the "phone_encrypted" field.
func PhoneEncryptedLT(v string) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldPhoneEncrypted, v))
}

// PhoneEncryptedLTE applies the LTE predicate on the "phone_encrypted" field.
func PhoneEncryptedLTE(v string) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldPhoneEncrypted, v))
}

// PhoneEncryptedContains applies the Contains predicate on the "phone_encrypted" field.
func PhoneEncryptedContains(v string) predicate.Code {
	return predicate.Code(sql.FieldContains(FieldPhoneEncrypted, v))
}

// PhoneEncryptedHasPrefix applies the HasPrefix predicate on the "phone_encrypted" field.
func PhoneEncryptedHasPrefix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasPrefix(FieldPhoneEncrypted, v))
}

// PhoneEncryptedHasSuffix applies the HasSuffix predicate on the "phone_encrypted" field.
func PhoneEncryptedHasSuffix(v string) predicate.Code {
	return predicate.Code(sql.FieldHasSuffix(FieldPhoneEncrypted, v))
}

// PhoneEncryptedIsNil applies the IsNil predicate on the "phone_encrypted" field.
func PhoneEncryptedIsNil() predicate.Code {
	return predicate.Code(sql.FieldIsNull(FieldPhoneEncrypted))
}

// PhoneEncryptedNotNil applies the NotNil predicate on the "phone_encrypted" field.
func PhoneEncryptedNotNil() predicate.Code {
	return predicate.Code(sql.FieldNotNull(FieldPhoneEncrypted))
}

// PhoneEncryptedEqualFold applies the EqualFold predicate on the "phone_encrypted" field.
func PhoneEncryptedEqualFold(v string) predicate.Code {
	return predicate.Code(sql.FieldEqualFold(FieldPhoneEncrypted, v))
}

// PhoneEncryptedContainsFold applies the ContainsFold predicate on the "phone_encrypted" field.
func PhoneEncryptedContainsFold(v string) predicate.Code {
	return predicate.Code(sql.FieldContainsFold(FieldPhoneEncrypted, v))
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.Code {
	return predicate.Code(sql.FieldIsNull(FieldData))
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.Code {
	return predicate.Code(sql.FieldNotNull(FieldData))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Code {
	return predicate.Code(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Code {
	return predicate.Code(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Code {
	return predicate.Code(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Code) predicate.Code {
	return predicate.Code(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Code) predicate.Code {
	return predicate.Code(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Code) predicate.Code {
	return predicate.Code(sql.NotPredicates(p))
}
