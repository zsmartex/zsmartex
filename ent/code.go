// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zsmartex/zsmartex/ent/code"
)

// Code is the model entity for the Code schema.
type Code struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Type holds the value of the "type" field.
	Type code.Type `json:"type,omitempty"`
	// Category holds the value of the "category" field.
	Category code.Category `json:"category,omitempty"`
	// EmailIndex holds the value of the "email_index" field.
	EmailIndex int64 `json:"email_index,omitempty"`
	// EmailEncrypted holds the value of the "email_encrypted" field.
	EmailEncrypted string `json:"email_encrypted,omitempty"`
	// PhoneIndex holds the value of the "phone_index" field.
	PhoneIndex int64 `json:"phone_index,omitempty"`
	// PhoneEncrypted holds the value of the "phone_encrypted" field.
	PhoneEncrypted string `json:"phone_encrypted,omitempty"`
	// Data holds the value of the "data" field.
	Data json.RawMessage `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Code) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case code.FieldData:
			values[i] = new([]byte)
		case code.FieldEmailIndex, code.FieldPhoneIndex:
			values[i] = new(sql.NullInt64)
		case code.FieldUserID, code.FieldCode, code.FieldType, code.FieldCategory, code.FieldEmailEncrypted, code.FieldPhoneEncrypted:
			values[i] = new(sql.NullString)
		case code.FieldCreatedAt, code.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case code.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Code fields.
func (c *Code) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case code.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case code.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				c.UserID = value.String
			}
		case code.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case code.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				c.Type = code.Type(value.String)
			}
		case code.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				c.Category = code.Category(value.String)
			}
		case code.FieldEmailIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field email_index", values[i])
			} else if value.Valid {
				c.EmailIndex = value.Int64
			}
		case code.FieldEmailEncrypted:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_encrypted", values[i])
			} else if value.Valid {
				c.EmailEncrypted = value.String
			}
		case code.FieldPhoneIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field phone_index", values[i])
			} else if value.Valid {
				c.PhoneIndex = value.Int64
			}
		case code.FieldPhoneEncrypted:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_encrypted", values[i])
			} else if value.Valid {
				c.PhoneEncrypted = value.String
			}
		case code.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case code.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case code.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Code.
// This includes values selected through modifiers, order, etc.
func (c *Code) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Code.
// Note that you need to call Code.Unwrap() before calling this method if this Code
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Code) Update() *CodeUpdateOne {
	return NewCodeClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Code entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Code) Unwrap() *Code {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Code is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Code) String() string {
	var builder strings.Builder
	builder.WriteString("Code(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("user_id=")
	builder.WriteString(c.UserID)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(c.Code)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", c.Type))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", c.Category))
	builder.WriteString(", ")
	builder.WriteString("email_index=")
	builder.WriteString(fmt.Sprintf("%v", c.EmailIndex))
	builder.WriteString(", ")
	builder.WriteString("email_encrypted=")
	builder.WriteString(c.EmailEncrypted)
	builder.WriteString(", ")
	builder.WriteString("phone_index=")
	builder.WriteString(fmt.Sprintf("%v", c.PhoneIndex))
	builder.WriteString(", ")
	builder.WriteString("phone_encrypted=")
	builder.WriteString(c.PhoneEncrypted)
	builder.WriteString(", ")
	builder.WriteString("data=")
	builder.WriteString(fmt.Sprintf("%v", c.Data))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Codes is a parsable slice of Code.
type Codes []*Code
