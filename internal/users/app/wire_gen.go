// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/zsmartex/pkg/v3/infrastucture/database"
	"github.com/zsmartex/pkg/v3/infrastucture/redis"
	"github.com/zsmartex/zsmartex/cmd/users/config"
	"github.com/zsmartex/zsmartex/internal/users/app/router"
	"github.com/zsmartex/zsmartex/internal/users/infras/repo"
	"github.com/zsmartex/zsmartex/internal/users/usecases/users"
	"github.com/zsmartex/zsmartex/pkg/session"
	"google.golang.org/grpc"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitApp(cfg *config.Config, grpcServer *grpc.Server, redisClient *redis.RedisClient) (*App, error) {
	store := session.NewStore(redisClient)
	db, err := postgresFunc(cfg)
	if err != nil {
		return nil, err
	}
	userCredentialsRepository := repo.NewUserCredentialsRepository(db)
	userRepository := repo.NewUserRepository(db, userCredentialsRepository)
	useCase := users.NewUserUseCase(userRepository, userCredentialsRepository)
	userServiceServer := router.NewUserGRPCServer(grpcServer, store, useCase)
	app := New(cfg, userServiceServer)
	return app, nil
}

// wire.go:

func postgresFunc(config2 *config.Config) (*gorm.DB, error) {
	return database.New(&database.Config{
		Host:     config2.Postgres.Host,
		Port:     config2.Postgres.Port,
		User:     config2.Postgres.User,
		Password: config2.Postgres.Password,
		DBName:   config2.Postgres.Database,
	})
}
